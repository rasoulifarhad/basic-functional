### From https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type/26328555#26328555
#
## Should Java 8 getters return optional type?
#
# Of course, people will do what they want. But we did have a clear intention when adding this feature, and it was not to be a general purpose 
# Maybe type, as much as many people would have liked us to do so. Our intention was to provide a limited mechanism for library method return 
# types where there needed to be a clear way to represent "no result", and using null for such was overwhelmingly likely to cause errors.
#
# For example, you probably should never use it for something that returns an array of results, or a list of results; instead return an empty 
# array or list. You should almost never use it as a field of something or a method parameter.
#
# I think routinely using it as a return value for getters would definitely be over-use.
#
# There's nothing wrong with Optional that it should be avoided, it's just not what many people wish it were, and accordingly we were fairly 
# concerned about the risk of zealous over-use.
#
# (Public service announcement: NEVER call Optional.get unless you can prove it will never be null; instead use one of the safe methods like 
# orElse or ifPresent. In retrospect, we should have called get something like getOrElseThrowNoSuchElementException or something that made it 
# far clearer that this was a highly dangerous method that undermined the whole purpose of Optional in the first place. Lesson learned. 
# (UPDATE: Java 10 has Optional.orElseThrow(), which is semantically equivalent to get(), but whose name is more appropriate.))
#
# NOTE: 
#
# Limiting the use of Optional or Option types to method and function return types is actually a pretty sound design guideline.
#
# In an Object Oriented language setting fields to null is a sign that those fields could be more better represented as a non-nullable value 
# in some sub-class. Equally, Optional parameters can often be better handled and represented by alternative method declarations.
#
## Donâ€™t allow null fields
#
# If you find yourself declaring a lot of fields as null, this is a pretty good sign that your Object model needs reworking.
#
#     "Illegal states should be unrepresentable in our code"
#      
#     "If a field is present in a class we should not have to worry about a NullPointerException 
#      when an attempt is made to access it." 
#

