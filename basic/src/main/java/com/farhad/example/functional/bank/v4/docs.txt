## Bank Service 
#                
#    ┌───────────┐                             ┌───────────┐
#    │           │        (1)creates           │           │   
#    │  Builder  ├────────────────────────────>│  Class A  │
#    │           │                             │           │
#    └─────┬─────┘                             └────────┬──┘
#          │                                         ^  │ 
#          │                                         │  │
#          │                                         │  │
#          │              ┌───────────┐              │  │ 
#          │              │           │              │  │
#          │              │ Service A ├──────────────┘  │
#  (2)     └─────────────>│           │                 │
#  injects dependencies   └─────┬─────┘                 │
#                               │                       │
#                               │                       │ 
#                               V                       │ 
#                         ┌──────────┐                  │
#                         │          │     (3)uses      │
#                         │IService A│<─────────────────┘
#                         │          │
#                         └──────────┘
#
#
#
## Static Methods
#               
#                         |                  |
#             A,B,Ctx     |   C,D,Ctx,S1     |
#            ---------> S1|  ------------> S2| -----> result  
#              open       |                  |
#                         |                  |
#
## Lazy evaluation
#
#                           │                        │ 
#                           │ apply(Ctx)             │ apply(Ctx)
#                           V                        V
#              A,B    ┌───────────┐    C,D     ┌───────────┐
#            ───────> │ Ctx -> S1 │ ┌─────────>│ Ctx -> S2 │----> result
#              open   └───────────┘ │  credit  └───────────┘ 
#                           │       │                │ 
#                           │       │                │
#                           V S1────┘                V S2
#
#
## OOP impl
#
#                        │                         
#                        │injection               
#                        V                                   
#                     ┌───────────┐         ┌───────────┐ 
#              A,B    │ Ctx       │ C,D     │ Ctx       │
#            ───────> │           │────────>│           │────> result
#              open   │        S1 │ credit  │        S2 │ 
#                     └───────────┘         └───────────┘ 
#                                                      
#                                                     
## Reader monad
#
#
#              A,B    ┌───────────┐    C,D     ┌───────────┐
#            ───────> │ Ctx -> S1 │───────────>│ Ctx -> S2 │
#              open   └───────────┘map(credit) └───────────┘ 
#                                                | 
#                                                |
#                                                V S2
#                         apply(Ctx) ┌───────────────┐
#                       ───────────> │ Ctx -> result │────> result
#                                    └───────────────┘ 
#
### Wrap up Toward a functional domain model
#
## API design is an iterative process
#
## Strive for immutability
#
#    private final Object obj;
#
## Confine side-effects
#
## Avoid using exceptions for error handling
#
## Say it with types
#
#    Tuple3< 
#          Function< 
#                   BankConnection, 
#                   Try< Account > 
#          > ,
#          Optional< Address >,
#          Future<
#                 List< Withdrawal >
#          > 
#    >
#
## Use anemic object
#
#               ┌────────────────────────┐
#               │        SERVICES        │
#               │                        │  
#               │       ┌────────┐       │
#               │       │ DOMAIN │       │
#               │       └────────┘       │
#               │                        │
#               └────────────────────────┘ 
#
#
## Put domain logic in pure functions
#
## FP allows better Reusability & Composability
#
## Throw away your GoF copy ...
#
## … and learn some functional patterns

